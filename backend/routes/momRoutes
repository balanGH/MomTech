const express = require('express');
const Mom = require('../models/Mom');
const Babysitter = require('../models/Babysitter');
const bs_booking = require('../models/bs_booking');

const router = express.Router();
[
  {
    "mom_email": "mom@example.com",
    "babysitter_email": "babysitter1@example.com",
    "booking_date": "2025-04-20"
  }
]
router.get('/mom', async (req, res) => {
  try {
    const userEmail = req.query.email;

    if (!userEmail) {
      return res.status(400).json({ error: 'Email is required to fetch mom details.' });
    }

    const mom = await Mom.findOne({ email: userEmail }).lean();
    if (!mom) {
      return res.status(404).json({ error: 'Mom with the provided email was not found.' });
    }

    return res.status(200).json({ mom });
  } catch (error) {
    console.error('❌ Error fetching mom details:', error.message || error);
    return res.status(500).json({ error: 'An unexpected error occurred. Please try again later.' });
  }
});

router.get('/child', async (req, res) => {
  try {
    const userEmail = req.query.email;

    if (!userEmail) {
      return res.status(400).json({ error: 'Email is required to fetch child details.' });
    }

    const mom = await Mom.findOne({ email: userEmail }).lean();
    if (!mom) {
      return res.status(404).json({ error: 'Mom with the provided email was not found.' });
    }

    const childDetails = mom.child || {};
    if (!childDetails.name) {
      return res.status(200).json({ child: {} }); 
    }

    return res.status(200).json({ child: childDetails });
  } catch (error) {
    console.error('❌ Error fetching child details:', error.message || error);
    return res.status(500).json({ error: 'An unexpected error occurred. Please try again later.' });
  }
});

router.post('/childupdate', async (req, res) => {
  try {
    const { email, healthoverview } = req.body;

    if (!email) {
      return res.status(400).json({ error: 'Email is required.' });
    }

    if (!healthoverview || !healthoverview.date || !healthoverview.weight || !healthoverview.height || !healthoverview.temperature) {
      return res.status(400).json({ error: 'All health overview fields are required.' });
    }

    const mom = await Mom.findOne({ email: email });
    if (!mom) {
      return res.status(404).json({ error: 'Mom with the provided email was not found.' });
    }

    if (!mom.child) {
      mom.child = { healthoverview: [] };
    }
    if (!mom.child.healthoverview) {
      mom.child.healthoverview = [];
    }

    mom.child.healthoverview.push(healthoverview);

    await mom.save();

    return res.status(200).json({ message: 'Health overview updated successfully!' });
  } catch (error) {
    console.error('❌ Error updating health overview:', error.message || error);
    return res.status(500).json({ error: 'An unexpected error occurred. Please try again later.' });
  }
});

router.get('/babysitters_search', async (req, res) => {
  try {
    const babysitters = await Babysitter.find();
    res.json(babysitters);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch babysitters' });
  }
});

router.get('/bookings', async (req, res) => {
  try {
    const { mom_email } = req.query;

    if (!mom_email) {
      return res.status(400).json({ error: 'Mom email is required to fetch bookings.' });
    }

    // Fetch bookings
    const bookings = await bs_booking.find({ mom_email }).lean();

    if (!bookings.length) {
      return res.status(404).json({ error: 'No bookings found for the provided mom email.' });
    }

    // Fetch babysitter details for each booking
    const babysitterEmails = bookings.map((booking) => booking.babysitter_email);
    const babysitters = await Babysitter.find({ email: { $in: babysitterEmails } }).lean();

    // Map babysitter details to their email for quick lookup
    const babysitterMap = babysitters.reduce((map, babysitter) => {
      map[babysitter.email] = babysitter;
      return map;
    }, {});

    // Merge babysitter details into bookings
    const enrichedBookings = bookings.map((booking) => ({
      ...booking,
      babysitter_details: babysitterMap[booking.babysitter_email] || null, // Add babysitter details or null if not found
    }));

    return res.status(200).json({ bookings: enrichedBookings });
  } catch (error) {
    console.error('❌ Error fetching bookings:', error.message || error);
    return res.status(500).json({ error: 'An unexpected error occurred. Please try again later.' });
  }
});

router.post('/book_babysitter', async (req, res) => {
  try {
    const { mom_email, babysitter_email, booking_date } = req.body;
    console.log('Booking request:', req.body);

    if (!mom_email || !babysitter_email || !booking_date) {
      return res.status(400).json({ error: 'Mom email, babysitter email, and booking date are required.' });
    }

    const bookingDate = new Date(booking_date);
    if (isNaN(bookingDate.getTime())) {
      return res.status(400).json({ error: 'Invalid booking date format.' });
    }

    const normalizedDate = bookingDate.toISOString().split('T')[0];

    const existingBooking = await bs_booking.findOne({
      mom_email,
      babysitter_email,
      booking_date: normalizedDate,
    });

    if (existingBooking) {
      return res.status(409).json({ error: 'Booking already exists for the given mom, babysitter, and date.' });
    }

    const newBooking = new bs_booking({
      mom_email,
      babysitter_email,
      booking_date: normalizedDate,
    });

    await newBooking.save();
    return res.status(201).json({ message: 'Booking created successfully!' });
  } catch (error) {
    if (error.code === 11000) {
      return res.status(409).json({ error: 'Duplicate booking detected.' });
    }
    console.error('❌ Error creating booking:', error.message || error);
    return res.status(500).json({ error: 'An unexpected error occurred. Please try again later.' });
  }
});

module.exports = router;