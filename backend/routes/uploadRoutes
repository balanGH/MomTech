const express = require('express');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const extractTextFromPDF = require('../utils/pdfParser');
const Babysitter = require('../models/Babysitter');

const router = express.Router();

// Multer Storage
const storage = multer.diskStorage({
  destination: './uploads/',
  filename: (req, file, cb) => {
    cb(null, file.originalname);
  }
});
const upload = multer({ storage });

// Upload Route
router.post('/', upload.fields([
  { name: 'babysitting', maxCount: 1 },
  { name: 'firstAid', maxCount: 1 },
  { name: 'anaphylaxis', maxCount: 1 },
  { name: 'otherDocuments', maxCount: 1 }
]), async (req, res) => {
  try {
    console.log('üìÇ Files Received:', req.files);

    const userEmail = req.body.email;
    console.log("üìß User Email:", userEmail);
    if (!userEmail) return res.status(400).json({ error: 'Email is required' });

    const requiredDocs = {
      babysitting: 'babysitting certificate',
      firstAid: 'first aid certificate',
      anaphylaxis: 'anaphylaxis certificate'
    };

    // Validate Required Documents
    for (let docType in requiredDocs) {
      if (!req.files[docType]) return res.status(400).json({ error: `${docType} document is required` });

      const filePath = path.join(__dirname, '../uploads', req.files[docType][0].filename);
      const extractedText = await extractTextFromPDF(filePath);
      console.log(`üìÑ Extracted Text from ${docType}:`, extractedText);

      if (!extractedText.toLowerCase().includes(requiredDocs[docType])) {
        return res.status(400).json({ error: `Invalid ${docType} document` });
      }

      fs.unlinkSync(filePath); // Cleanup file
    }

    // ‚úÖ Optional Document Processing
    if (req.files.otherDocuments) {
      const filePath = path.join(__dirname, '../uploads', req.files.otherDocuments[0].filename);
      const extractedText = await extractTextFromPDF(filePath);
      console.log(`üìÑ Extracted Text from otherDocuments:`, extractedText);
      fs.unlinkSync(filePath);
    }

    // ‚úÖ Update Babysitter Verification in MongoDB
    const updatedBabysitter = await Babysitter.findOneAndUpdate(
      { email: userEmail },
      { verification: true },
      { new: true, upsert: true }
    );

    res.json({ message: '‚úÖ Verification successful!', babysitter: updatedBabysitter });

  } catch (error) {
    console.error('‚ùå Error:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

module.exports = router;
